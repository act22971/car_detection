import subprocess as sp
import cv2
import numpy as np
from ultralytics import YOLO
import os
import time
import torch

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ GPU ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f"üñ•Ô∏è ‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {device}")
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLOv8 (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô yolov8n.pt ‡∏´‡∏£‡∏∑‡∏≠ yolov8s.pt ‡∏´‡∏≤‡∏Å‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
model = YOLO('yolov8n.pt')
model.to(device)
# RTSP URL
RTSP_URL = 'rtsp://admin:NT2%40admin@ntcctvptn.totddns.com:64780/cam/realmonitor?channel=1&subtype=0'

def ffmpeg_pipe(url, width=640, height=480):
    cmd = [
        'ffmpeg',
        '-rtsp_transport', 'tcp',
        '-i', url,
        '-loglevel', 'quiet',
        '-an',
        '-f', 'rawvideo',
        '-pix_fmt', 'bgr24',
        '-s', f"{width}x{height}",
        '-vcodec', 'rawvideo',
        '-'
    ]
    return sp.Popen(cmd, stdout=sp.PIPE, bufsize=10**8)

def main():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏° RTSP ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• YOLOv8 ...")
    pipe = ffmpeg_pipe(RTSP_URL)
    width, height = 640, 480

    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö track memory
    track_memory = {}

    try:
        while True:
            raw_frame = pipe.stdout.read(width * height * 3)
            if len(raw_frame) != width * height * 3:
                print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Äî ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏´‡∏•‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
                break

            frame = np.frombuffer(raw_frame, np.uint8).reshape((height, width, 3))

            # ‡∏£‡∏±‡∏ô YOLO tracking
            results = model.track(
            frame,
            persist=True,
            tracker="bytetrack.yaml",
            imgsz=1280,
            conf=0.15,  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.25
            iou=0.5,
            agnostic_nms=True
            )


            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ class ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            target_classes = ['car', 'motorcycle', 'bus','truck', 'bicycle']
            names = model.names

            for result in results:
                if result.boxes is not None and len(result.boxes) > 0:
                    cls_ids = result.boxes.cls.cpu().numpy().astype(int)
                    keep_idx = [i for i, cls_id in enumerate(cls_ids) if names[cls_id] in target_classes]
                    result.boxes = result.boxes[keep_idx] if keep_idx else None

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á object ‡∏ó‡∏µ‡πà‡∏°‡∏µ id
            current_time = time.time()
           # ‡∏•‡∏π‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ boxes
            if results[0].boxes is not None:
                for box in results[0].boxes:
                    if box.id is not None:
                        id = int(box.id.item())
                        xyxy = box.xyxy.cpu().numpy()[0]
                        track_memory[id] = {
                        'last_seen': current_time,
                        'box': xyxy
                        }


            # ‡∏•‡∏ö object ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ß‡∏¥
            track_memory = {
                k: v for k, v in track_memory.items()
                if current_time - v['last_seen'] < 5.0
            }

            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            output = results[0].plot()

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            cv2.imshow("YOLOv8 RTSP", output)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß")
                break

    finally:
        pipe.terminate()
        cv2.destroyAllWindows()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ FFmpeg ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    os.environ['FFREPORT'] = 'file=ffmpeg_errors.log'
    main()
